ext.maven_name='Solstice'
ext.maven_artifact = 'solstice'
ext.maven_desc='Single-classloader implementation of the Eclipse plugin registry and OSGi (including Declarative Services)'

apply from: 干.file('changelog.gradle')
apply plugin: 'java-library'
sourceCompatibility = java_compat
targetCompatibility = java_compat
tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
apply from: 干.file('maven.gradle')
apply from: 干.file('sonatype.gradle')

apply plugin: 'eclipse'

jar.manifest.attributes(
		'Bundle-SymbolicName':    'dev.equo.ide; singleton:=true',
		'Bundle-Version':         '0.0.0',
		'Implementation-Version': spotlessChangelog.versionNext)

spotless {
	java {
		custom 'AtomosFrontend', { text ->
			if (text.contains('import org.apache.felix.atomos.') && !text.contains('class BundleContextAtomos ')) {
				throw new AssertionError("Atomos imports are only allowed within `BundleContextAtomos.java`")
			}
		}
	}
}

tasks.named('processResources') {
	for (String subjar : [
				'patch-equinox-4.27',
				'patch-chromium-swt'
			]) {
		dependsOn(":${subjar}:jar")
		from "../${subjar}/build/libs/${subjar}.jar"
	}
}

String VER_SLF4J = '1.7.36'
dependencies {
	api "org.slf4j:slf4j-api:$VER_SLF4J"
	api "com.diffplug.durian:durian-swt.os:$VER_DURIAN_SWT"
	compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

	compileOnly 'org.apache.felix:org.apache.felix.atomos:1.0.0'
	compileOnly 'org.apache.felix.atomos:osgi.core:8.0.0:AtomosEquinox'

	// needed to navigate p2
	implementation 'org.tukaani:xz:1.9'
	implementation 'com.squareup.okhttp3:okhttp:4.12.0'

	testImplementation "org.slf4j:slf4j-simple:$VER_SLF4J"
	testImplementation "org.junit.jupiter:junit-jupiter:$VER_JUNIT"
	testImplementation "org.assertj:assertj-core:$VER_ASSERTJ"
}

tasks.named('test') {
	useJUnitPlatform()
	if (com.diffplug.common.swt.os.OS.getNative().isMac()) {
		jvmArgs = ['-XstartOnFirstThread']
	}
}
apply from: 干.file('snapshot-testing.gradle')

def PLUGIN_SHIMS = ['welcome', 'buildship', 'm2e']
if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
	PLUGIN_SHIMS.remove('buildship')
	PLUGIN_SHIMS.remove('m2e')
}
for (shim in PLUGIN_SHIMS) {
	sourceSets.register(shim) {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
		java {}
	}
}
jar {
	for (shim in PLUGIN_SHIMS) {
		from sourceSets.getByName(shim).output.classesDirs
	}
}

String VERSION = '4.27'
apply plugin: 'dev.equo.p2deps'
p2deps {
	into 'api', {
		p2repo "https://download.eclipse.org/eclipse/updates/${VERSION}/"
		install 'org.eclipse.osgi'
	}
	into([
		'compileOnly',
		'testImplementation'
	], {
		p2repo "https://download.eclipse.org/eclipse/updates/${VERSION}/"
		install 'org.eclipse.ui.ide.application'
	})
	into 'welcomeCompileOnly', {
		p2repo "https://download.eclipse.org/eclipse/updates/${VERSION}/"
		install 'org.eclipse.platform.ide.categoryIU'
	}
	into 'buildshipCompileOnly', {
		jdt()
		p2repo "https://download.eclipse.org/buildship/updates/e431/releases/3.x/3.1.10.v20240802-1211/"
		install 'org.eclipse.buildship.feature.group'
	}
	into 'm2eCompileOnly', {
		m2e('2.6.2')
	}
}

tasks.register('IdeMainTestClean', Delete) {
	delete 'build/testSetup'
}

tasks.register('IdeMainTest', JavaExec) {
	dependsOn 'IdeMainTestClean'
	mainClass = 'dev.equo.ide.IdeMainBuildPluginTest'
	classpath = sourceSets.test.runtimeClasspath
	if (com.diffplug.common.swt.os.OS.getNative().isMac()) {
		jvmArgs = ['-XstartOnFirstThread']
	}
}